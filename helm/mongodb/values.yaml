affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/component
            operator: In
            values:
            - mongodb
        topologyKey: kubernetes.io/hostname
      weight: 100
annotations: {}
arbiter:
  affinity: {}
  annotations: {}
  args: []
  command: []
  configuration: ""
  containerPorts:
    mongodb: 27017
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  existingConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  initContainers: []
  labels: {}
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 10
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: OrderedReady
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    sysctls: []
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 10
  resources:
    limits: {}
    requests: {}
  runtimeClassName: ""
  schedulerName: ""
  service:
    annotations: {}
    extraPorts: []
    nameOverride: ""
    ports:
      mongodb: 27017
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 30
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  terminationGracePeriodSeconds: ""
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
architecture: replicaset
args: []
auth:
  database: ""
  databases:
  - dev
  enabled: true
  existingSecret: ""
  password: ""
  passwords:
  - dfgzG9vR0bP1kO4zU1z4234543531hO7jX
  replicaSetKey: dE9jZ9bO4dfgsdS7gI0r
  rootPassword: dfgzG9vR0bP1kO4zU1z4234543531hO7jX
  rootUser: root
  username: ""
  usernames:
  - dbadmin
clusterDomain: cluster.local
command: []
common:
  exampleValue: common-chart
  global:
    imagePullSecrets: []
    imageRegistry: ""
    namespaceOverride: ""
    storageClass: ""
commonAnnotations: {}
commonLabels: {}
configuration: ""
containerPorts:
  mongodb: 27017
containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
diagnosticMode:
  args:
  - infinity
  command:
  - sleep
  enabled: false
directoryPerDB: false
disableJavascript: false
disableSystemLog: false
enableIPv6: false
enableJournal: true
existingConfigmap: ""
externalAccess:
  autoDiscovery:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.24.3-debian-11-r7
    resources:
      limits: {}
      requests: {}
  enabled: true
  hidden:
    enabled: false
    service:
      annotations: {}
      domain: ""
      externalTrafficPolicy: Local
      extraPorts: []
      loadBalancerIPs: []
      loadBalancerSourceRanges: []
      nodePorts: []
      portName: mongodb
      ports:
        mongodb: 27017
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: LoadBalancer
  service:
    annotations: {}
    domain: ""
    externalTrafficPolicy: Local
    extraPorts: []
    loadBalancerIPs: []
    loadBalancerSourceRanges: []
    nodePorts:
    - 32021
    - 32020
    portName: mongodb
    ports:
      mongodb: 27017
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: NodePort
extraDeploy: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraFlags: []
extraVolumeMounts: []
extraVolumes: []
fullnameOverride: ""
global:
  imagePullSecrets: []
  imageRegistry: ""
  namespaceOverride: ""
  storageClass: ""
hidden:
  affinity: {}
  annotations: {}
  args: []
  command: []
  configuration: ""
  containerPorts:
    mongodb: 27017
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: false
  existingConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  initContainers: []
  labels: {}
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 10
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    medium: ""
    mountPath: /bitnami/mongodb
    size: 8Gi
    storageClass: ""
    subPath: ""
    volumeClaimTemplates:
      dataSource: {}
      requests: {}
      selector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: OrderedReady
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    sysctls: []
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 10
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  runtimeClassName: ""
  schedulerName: ""
  service:
    annotations: {}
    extraPorts: []
    portName: mongodb
    ports:
      mongodb: 27017
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 30
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  terminationGracePeriodSeconds: ""
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
hostAliases: []
image:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/mongodb
  tag: 5.0.10-debian-11-r3
initContainers: []
initdbScripts: {}
initdbScriptsConfigMap: ""
kubeVersion: ""
labels: {}
lifecycleHooks: {}
livenessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 30
  periodSeconds: 20
  successThreshold: 1
  timeoutSeconds: 10
metrics:
  args: []
  command: []
  containerPort: 9216
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: false
  extraFlags: ""
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/mongodb-exporter
    tag: 0.33.0-debian-11-r9
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 15
  password: ""
  prometheusRule:
    additionalLabels: {}
    enabled: false
    namespace: ""
    rules: []
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 15
  resources:
    limits:
      cpu: 50m
      memory: 64Mi
    requests:
      cpu: 25m
      memory: 32Mi
  service:
    annotations:
      prometheus.io/path: /metrics
      prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
      prometheus.io/scrape: "true"
    extraPorts: []
    ports:
      metrics: 9216
    type: ClusterIP
  serviceMonitor:
    enabled: true
    honorLabels: false
    interval: 30s
    jobLabel: ""
    labels: {}
    metricRelabelings: []
    namespace: observability
    relabelings: []
    scrapeTimeout: 30s
    selector: {}
  startupProbe:
    enabled: false
    failureThreshold: 30
    initialDelaySeconds: 5
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 10
  username: ""
nameOverride: ""
namespaceOverride: ""
nodeAffinityPreset:
  key: ""
  type: ""
  values: []
nodeSelector: {}
pdb:
  create: true
  maxUnavailable: ""
  minAvailable: 1
persistence:
  accessModes:
  - ReadWriteOnce
  annotations: {}
  enabled: true
  existingClaim: ""
  medium: ""
  mountPath: /bitnami/mongodb
  resourcePolicy: ""
  size: 5Gi
  storageClass: ""
  subPath: ""
  volumeClaimTemplates:
    dataSource: {}
    requests: {}
    selector: {}
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podManagementPolicy: OrderedReady
podSecurityContext:
  enabled: true
  fsGroup: 1001
  sysctls: []
podSecurityPolicy:
  allowPrivilegeEscalation: false
  create: false
  privileged: false
  spec: {}
priorityClassName: ""
rbac:
  create: false
  rules: []
readinessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 5
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
replicaCount: 2
replicaSetConfigurationSettings:
  configuration: {}
  enabled: false
replicaSetHostnames: true
replicaSetName: rs0
resources:
  limits:
    cpu: 1
    memory: 3Gi
  requests:
    cpu: 1
    memory: 3Gi
runtimeClassName: ""
schedulerName: ""
service:
  annotations: {}
  clusterIP: ""
  externalIPs: []
  externalTrafficPolicy: Local
  extraPorts: []
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  nameOverride: ""
  nodePorts:
    mongodb: "32017"
  portName: mongodb
  ports:
    mongodb: 27017
  sessionAffinity: None
  sessionAffinityConfig: {}
  type: ClusterIP
serviceAccount:
  annotations: {}
  automountServiceAccountToken: true
  create: true
  name: ""
sidecars: []
startupProbe:
  enabled: false
  failureThreshold: 30
  initialDelaySeconds: 5
  periodSeconds: 20
  successThreshold: 1
  timeoutSeconds: 10
systemLogVerbosity: 0
terminationGracePeriodSeconds: ""
tls:
  autoGenerated: true
  caCert: ""
  caKey: ""
  enabled: false
  existingSecret: ""
  extraDnsNames: []
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/nginx
    tag: 1.23.1-debian-11-r4
  mode: allowTLS
  resources:
    limits: {}
    requests: {}
tolerations: []
topologySpreadConstraints: []
updateStrategy:
  type: RollingUpdate
useStatefulSet: false
volumePermissions:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 11-debian-11-r21
  resources:
    limits: {}
    requests: {}
  securityContext:
    runAsUser: 0
